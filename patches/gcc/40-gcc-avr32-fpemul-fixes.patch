diff -Naur ./gcc/config/avr32/lib1funcs.S ./gcc/config/avr32/lib1funcs.S
--- ./gcc/config/avr32/lib1funcs.S	2010-12-03 11:44:31.000000000 -0600
+++ ./gcc/config/avr32/lib1funcs.S	2010-12-03 11:51:53.000000000 -0600
@@ -1036,6 +1036,7 @@
         brne    __avr32_f64_add_return_nan
         mov     r10, 0  /* Generate Inf in r11, r10 */
 	mov_imm r11, 0x7ff00000
+        or      r11, r12 /* Put sign bit back */
         ldm     sp++, r5, r6, r7, pc/* opL Inf, return Inf */
 __avr32_f64_add_return_nan:     
         mov     r10, -1 /* Generate NaN in r11, r10 */
@@ -1388,25 +1389,30 @@
 #endif  
  
         /* compare magnitude of op1 and op2 */
+        st.w    --sp, lr
+        st.w    --sp, r7
         lsl     r11,1                   /* Remove sign bit of op1 */
         srcs    r12                     /* Sign op1 to lsb of r12*/
-	subfeq	r10, 0
-	breq	3f			/* op1 zero */
         lsl     r9,1                    /* Remove sign bit of op2 */
+        srcs    r7
         rol     r12                     /* Sign op2 to lsb of lr, sign bit op1 bit 1 of r12*/
 	
  
         /* Check for Nan */
-	pushm	lr
-	mov_imm	lr, 0xffe00000
+        mov_imm lr, 0xffe00000
         cp.w    r10,0
         cpc     r11,lr
         brhi    0f      /* We have NaN */
         cp.w    r8,0
         cpc     r9,lr
         brhi    0f      /* We have NaN */
-	popm	lr
- 
+
+        cp.w    r11, 0
+        subfeq  r10, 0
+        breq    3f			/* op1 zero */
+        ld.w    r7, sp++
+        ld.w    lr, sp++
+
         cp.w    r12,3                   /* both operands negative ?*/    
         breq    1f
  
@@ -1452,18 +1458,22 @@
 #endif
 
 0:      
+        ld.w    r7, sp++
         popm    pc, r12=0
 #endif
  
 3:
-        lsl     r9,1                   /* Remove sign bit of op1 */
+        cp.w    r7, 1          /* Check sign bit from r9 */
 #ifdef L_avr32_f64_cmp_ge
-        srcs    r12		       /* If op2 is negative then op1 >= op2. */	
+        sreq    r12		       /* If op2 is negative then op1 >= op2. */	
 #endif
 #ifdef L_avr32_f64_cmp_lt
-        srcc    r12		       /* If op2 is positve then op1 <= op2. */
+        srne    r12		       /* If op2 is positve then op1 <= op2. */
 #endif
-	subfeq	r8, 0		       
+        cp.w    r9, 0
+        subfeq  r8, 0
+        ld.w    r7, sp++
+        ld.w    lr, sp++
 #ifdef L_avr32_f64_cmp_ge
 	reteq	1		       /* Both operands are zero. Return true. */
 #endif
@@ -1723,7 +1733,7 @@
         brne    16f     /* Return NaN if op1 is NaN */
         /* Op1 is inf check op2 */
         lsr     r6, r9, 20 /* Extract exponent */
-        cbr     r6, 8       /* Clear sign bit */
+        cbr     r6, 11      /* Clear sign bit */
         cp      r6, 0x7ff
         brne    17f     /* Inf/number gives inf, return inf */
         rjmp    16f     /* The rest gives NaN*/
@@ -1839,10 +1849,14 @@
 	 
 16:     /* Return NaN. */
         mov     r11, -1
-        mov     r10, -1
+        mov     r10, 0
         ldm     sp++, r0, r1, r2, r3, r4, r5, r6, r7,pc
         
-17:     /* Return INF. */
+17:     
+        /* Check if op1 is zero. */
+        or      r4, r10, r11
+        breq    __avr32_f64_div_op1_zero
+        /* Return INF. */
         mov     r11, lr /*Get correct sign*/
         andh    r11, 0x8000, COH
         orh     r11, 0x7ff0
@@ -2256,10 +2270,13 @@
  
         /* Unpack */
         lsl     r12,1
-        reteq   0                       /* Return zero if op1 is zero */
         lsl     r11,1
         breq    4f                      /* Check op2 for zero */
-        
+
+        tst     r12, r12
+        moveq   r9, 0
+        breq    12f
+
         /* Unpack op1*/ 
         /* exp: r9 */
         /* sf:  r12 */
@@ -2278,9 +2295,14 @@
         breq    13f /*If number is subnormal*/
         cp      r10, 0xff
         brhs    3f  /* Check op2 for NaN or Inf */      
-        
         lsl     r11,7
         sbr     r11, 31 /*Implicit bit*/
+
+        cp.w    r9, 0
+        subfeq  r12, 0
+        reteq   0                       /* op1 is zero and op2 is not zero */
+                                        /* or NaN so return zero */
+
 14:     
  
         /* For UC3, store with predecrement is faster than stm */
@@ -2449,9 +2471,14 @@
         reteq   0       /* Return zero if number/inf*/
         ret     -1      /* Return NaN*/
 4:
-        /* Op2 is zero ? */
+        /* Op1 is zero ? */
         tst     r12,r12
         reteq   -1      /* 0.0/0.0 is NaN */
+        /* Op1 is Nan? */
+        lsr     r9, r12, 24
+        breq    11f /*If number is subnormal*/
+        cp      r9, 0xff
+        brhs    2b  /* Check op1 for NaN or Inf */
         /* Nonzero/0.0 is Inf. Sign bit will be shifted in before returning*/
 	mov_imm	r12, 0xff000000
         rjmp    __divsf_return_op1
@@ -2801,6 +2828,7 @@
         lsl     r11,8                   /* check mantissa */
         movne   r11, -1                 /* Return NaN */
         moveq   r11, r10                /* Return inf */
+        mov     r10, 0
         rjmp    __extendsfdf_return_op1
 #endif                  
  
@@ -2848,7 +2876,7 @@
         /* NaN or inf */
         cbr     r12,31                  /* clear implicit bit */
         retne   -1                      /* Return NaN if mantissa not zero */
-	mov_imm	r12, 0xff000000
+	mov_imm	r12, 0x7f800000
         ret     r12                     /* Return inf */
  
 3:      /* Result is subnormal. Adjust it.*/
